var __assign = this && this.__assign || function () { __assign = Object.assign || function (t) { for (var s, i = 1, n = arguments.length; i < n; i++) { s = arguments[i]; for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p] } return t }; return __assign.apply(this, arguments) }; var TgMiniAppTracker = function () { function TgMiniAppTracker() { this.intervalId = null; this.tgWebApp = window.Telegram.WebApp; this.entryTime = (new Date).toISOString(); this.projectId = ""; this.serverUrl = "" } TgMiniAppTracker.prototype.init = function (options) { var _this = this; this.projectId = options.projectId; this.serverUrl = options.serverUrl; return this.initializeProject().then((function (response) { if (response.intervalSeconds === null) { _this.sendData(_this.collectData()) } else { _this.startPeriodicDataSending(response.intervalSeconds) } })).catch((function (error) { return console.error("Error initializing project:", error) })) }; TgMiniAppTracker.prototype.initializeProject = function () { var url = "".concat(this.serverUrl, "/init"); var data = this.collectData(); return this.sendRequest(url, data) }; TgMiniAppTracker.prototype.getPlatform = function () { return this.tgWebApp.platform }; TgMiniAppTracker.prototype.collectData = function () { return { projectId: this.projectId, userId: this.tgWebApp.initDataUnsafe.user.id, nickname: this.tgWebApp.initDataUnsafe.user.username, platform: this.getPlatform(), isPremium: this.tgWebApp.initDataUnsafe.user.is_premium || false, entryTime: this.entryTime } }; TgMiniAppTracker.prototype.startPeriodicDataSending = function (intervalSeconds) { var _this = this; this.sendData(this.collectData()); this.intervalId = window.setInterval((function () { _this.sendData(_this.collectData()) }), intervalSeconds * 1e3); this.tgWebApp.onEvent("mainButtonClicked", (function () { if (_this.intervalId !== null) { clearInterval(_this.intervalId) } var exitTime = (new Date).toISOString(); _this.sendData(__assign(__assign({}, _this.collectData()), { exitTime: exitTime })) })) }; TgMiniAppTracker.prototype.sendData = function (data) { var url = "".concat(this.serverUrl, "/data"); this.sendRequest(url, data).then((function (response) { return console.log("Data sent successfully:", response) })).catch((function (error) { return console.error("Error sending data:", error) })) }; TgMiniAppTracker.prototype.sendCustomParams = function (params) { var url = "".concat(this.serverUrl, "/custom"); var data = __assign(__assign({}, this.collectData()), { customParams: params }); this.sendRequest(url, data).then((function (response) { return console.log("Custom params sent successfully:", response) })).catch((function (error) { return console.error("Error sending custom params:", error) })) }; TgMiniAppTracker.prototype.sendRequest = function (url, data) { return fetch(url, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then((function (response) { return response.json() })) }; return TgMiniAppTracker }(); window.TgMiniAppTracker = new TgMiniAppTracker;
