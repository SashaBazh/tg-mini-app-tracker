var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var TgMiniAppTracker = /** @class */ (function () {
    function TgMiniAppTracker() {
        this.intervalId = null;
        this.tgWebApp = window.Telegram ? window.Telegram.WebApp : null;
        this.startTime = new Date().toISOString();
        this.projectId = "";
        this.serverUrl = "";
        this.userIp = "";
        this.userGeo = "";
        this.apiKey = "";
        this.statsApiKey = "";
    }

    TgMiniAppTracker.prototype.init = function (options) {
        var _this = this;
        this.projectId = options.projectId || "default_project_id";
        this.serverUrl = options.serverUrl || "https://default.server.url";
        this.apiKey = options.apiKey || "";
        this.statsApiKey = options.statsApiKey || "";

        return this.fetchUserIpAndGeo()
            .then(function () { return _this.getProjectFrequency(); })
            .then(function (frequency) {
                _this.startPeriodicDataSending(frequency);
            })
            .catch(function (error) {
                console.error("Error initializing project:", error);
                throw new Error("Initialization failed: " + error.message);
            });
    };

    TgMiniAppTracker.prototype.fetchUserIpAndGeo = function () {
        var _this = this;
        return fetch("https://ipapi.co/json/")
            .then(function (response) { return response.json(); })
            .then(function (data) {
                _this.userIp = data.ip || "0.0.0.0";
                _this.userGeo = _this.constructDetailedAddress(data);
            })
            .catch(function (error) {
                console.error("Error fetching IP and Geo data:", error);
                _this.userIp = "0.0.0.0";
                _this.userGeo = "Unknown location";
            });
    };
    
    TgMiniAppTracker.prototype.constructDetailedAddress = function (data) {
        var addressParts = [];
        
        if (data.street) addressParts.push(data.street);
        if (data.city) addressParts.push(data.city);
        if (data.region) addressParts.push(data.region);
        if (data.postal) addressParts.push(data.postal);
        if (data.country_name) addressParts.push(data.country_name);
        
        return addressParts.length > 0 ? addressParts.join(", ") : "Unknown location";
    };

    TgMiniAppTracker.prototype.getProjectFrequency = function () {
        var url = this.serverUrl + "/project/frequency";
        return this.sendRequest(url, {}, this.apiKey, 'GET')
            .then(function (response) {
                if (response && typeof response.frequency === 'number') {
                    return response.frequency;
                } else {
                    throw new Error("Invalid frequency response");
                }
            });
    };

    TgMiniAppTracker.prototype.getPlatform = function () {
        return this.tgWebApp ? this.tgWebApp.platform : "unknown_platform";
    };

    TgMiniAppTracker.prototype.collectData = function (customParams = {}, isSessionEnd = false) {
        var user = this.tgWebApp && this.tgWebApp.initDataUnsafe ? this.tgWebApp.initDataUnsafe.user : {};
        return {
            user_id: user.id || 0,
            nickname: user.username || "anonymous",
            platform: this.getPlatform(),
            premium: user.is_premium || false,
            language: user.language_code || "en",
            ip: this.userIp,
            geo: this.userGeo,
            start_time: this.startTime,
            end_time: isSessionEnd ? new Date().toISOString() : null,
            custom_params: customParams
        };
    };

    TgMiniAppTracker.prototype.startPeriodicDataSending = function (intervalSeconds) {
        var _this = this;
        this.sendData(this.collectData());
        this.intervalId = window.setInterval(function () {
            _this.sendData(_this.collectData());
        }, intervalSeconds * 1000);

        if (this.tgWebApp) {
            this.tgWebApp.onEvent("viewportChanged", function () {
                if (_this.tgWebApp.isExpanded === false) {
                    _this.sendSessionEndData();
                }
            });
        }

        window.addEventListener('beforeunload', function () {
            _this.sendSessionEndData();
        });

        document.addEventListener('visibilitychange', function () {
            if (document.visibilityState === 'hidden') {
                _this.sendSessionEndData();
            }
        });
    };

    TgMiniAppTracker.prototype.sendSessionEndData = function () {
        this.sendData(this.collectData({}, true));
        if (this.intervalId !== null) {
            clearInterval(this.intervalId);
        }
    };

    TgMiniAppTracker.prototype.sendData = function (data) {
        var url = this.serverUrl + "/data";
        return this.sendRequest(url, data, this.apiKey, 'POST')
            .then(function (response) { 
                console.log("Data sent successfully:", response);
                return response;
            })
            .catch(function (error) {
                console.error("Error sending data:", error);
                throw error;
            });
    };

    TgMiniAppTracker.prototype.sendCustomParams = function (params) {
        return this.sendData(this.collectData(params));
    };

    TgMiniAppTracker.prototype.getStatistics = function (options) {
        var url = this.serverUrl + "/statistics";
        return this.sendRequest(url, options, this.statsApiKey, 'POST');
    };

    TgMiniAppTracker.prototype.sendRequest = function (url, data, apiKey, method) {
        var options = {
            method: method,
            headers: {
                "Content-Type": "application/json",
                "api-key": apiKey
            }
        };
        
        if (method === 'POST') {
            options.body = JSON.stringify(data);
        }

        return fetch(url, options).then(function (response) { 
            if (!response.ok) {
                throw new Error('Network response was not ok: ' + response.statusText);
            }
            return response.json(); 
        });
    };

    return TgMiniAppTracker;
}());

window.TgMiniAppTracker = new TgMiniAppTracker();
